[{"content":"Free5GC核心网部署与接入测试手册 写在开篇： 建议养成备份（例如git工具）的好习惯。本文包含Linux开发基础内容、free5gc核心网\n==考虑到版权问题，本文章如需要转载请进行声明==\n起初使用VMware虚拟机装的Ubuntu桌面版系统，但是实际工程需要板载Linux系统（但是学习初期直接上手，容易因为不熟悉操作而出现诸如网卡连不了网，没声音，拼音输入法等软硬件不适配类似的各种问题）可以先基于虚拟机进行学习，入门后再基于板载Linux系统开发核心网。\n5G核心网介绍 参考 【5G】5G 核心网（5GC）基本架构_5g核心网架构-CSDN博客\n核心网具体结构 5G 核心网是支持 5G 移动通信的核心基础设施，在 5G 通信中负责实现数据处理、控制、管理、路由和连接等功能。5G 核心网的架构采用了基于服务的设计 (Service-based Architecture, SBA)，支持网络切片、NFV、软件定义网络 (Software-Defined Networking, SDN) 等先进技术，提供更高的灵活性和可扩展性。\n5G网络架构与接口 5G核心网网元功能 AMF (Access and Mobility Management Function) 接入与移动性管理功能，主要负责：\n接入控制、用户移动性管理 会话管理和用户身份管理 处理UE与网络的接入请求 管理用户接入状态及移动性支持 SMF (Session Management Function)\n会话管理功能，负责：\n会话的建立、修改和释放 数据流管理（路由、QoS保证、IP分配） UPF (User Plane Function) 用户面功能，负责：\n转发用户数据流 与SMF协作管理数据路径、路由和转发 NSSF (Network Slice Selection Function) 网络切片选择功能，负责：\n根据业务需求动态选择网络切片 管理不同业务场景的切片资源 PCF (Policy Control Function) 策略控制功能，负责：\n制定网络策略（QoS、计费、流量管理、安全性） 为AMF/SMF/UPF提供策略决策服务 UDM (Unified Data Management) 统一数据管理功能，负责：\n存储用户订阅信息（SUPI）、服务配置、认证信息 与AUSF/AMF等网元协作提供数据服务 5G网络组成 架构组成：5GC（核心网） + RAN（无线接入网） + UE（用户设备） 核心网功能：服务管理、数据传输、安全性 RAN功能：无线连接、数据传输与控制信号传递 UE角色：用户交互终端，通过RAN与核心网通信 无线接入网与核心网接口 主要接口及功能：\nN1接口\n连接：UE ↔ AMF 功能：信令传递（UE接入管理、认证） N2接口\n连接：AMF ↔ SMF 功能：会话管理协作（处理用户会话任务） N3接口\n连接：无线接入网 ↔ UPF 功能：用户数据传输（数据面主要路径） N4接口\n连接：SMF ↔ UPF 功能：用户数据路径选择与管理（SMF控制UPF流量） N6接口\n连接：UPF ↔ 数据网络（DN） 功能：用户数据外发至互联网/外部网络 linux开发基本配置与指令 一、常用指令 1.基本指令部分 复制 Ctrl+Shift+C\n粘贴 Ctrl+Shift+V\n更新包列表\n1 sudo apt update 查网卡ip\n1 2 Ifconfig # 记得提前安装ifconfig网络工具 sudo apt install net-tools 或者\n1 ip a 显示当前路径\n1 pwd 进入文件夹\n1 2 3 cd \u0026lt;文件夹名\u0026gt; # 例如 cd free5gc-compose # 或者进入多个内嵌文件夹如 cd ~/free5gc-compose/config 查询网站ip地址\n1 nslookup baidu.com 查各网元运行情况、地址\n1 2 docker-compose ps 或看全部网元： docker ps -a 停止容器网元运行\n1 docker-compose down 启动容器网元并后台挂机\n1 docker-compose up -d 查看运行日志（以amf为例，可换成smf、upf等）\n1 docker logs \u0026lt;id\u0026gt; 例如：docker logs amf\n查找单个网元信息（例如amf）\n1 docker inspect amf 进入容器进行交互\n1 docker exec -it \u0026lt;容器ID或容器名(如amf)\u0026gt; sh 或者docker exec -it \u0026lt;容器ID或容器名(如amf)\u0026gt; bash\n按照格式查找所有网元的ip地址（没有启动或者出错就不显示）\n1 docker inspect -f \u0026#39;{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\u0026#39; $(docker ps -aq) 查询所有网元mac地址\n1 docker inspect -f \u0026#39;{{.Name}} - {{range .NetworkSettings.Networks}}{{.MacAddress}}{{end}}\u0026#39; $(docker ps -aq) 我的地址（每个人的都不同，根据实际情况可以修改）： /home/wxy/free5gc-compose/config/amfcfg.yaml\n查看端口情况\n1 etstat -tuln | grep 38412 看防火墙设置\n1 sudo iptables -L 看网桥\n1 brctl show 查看网桥连接的ip地址\n1 brctl showmacs \u0026lt;网桥名\u0026gt; 看路由\n1 ip route show 添加网桥\n1 sudo brctl addif \u0026lt;bridge\u0026gt; \u0026lt;网卡名\u0026gt; ==Linux启动wireshark抓包——需要安装linux的wireshark然后启动：\tsudo wireshark==\n2.网络空间测试 一般是用docker inspect amf或者docker logs amf来对amf、smf、upf之类的进行测试，\n也可以进入网络空间进行进一步测试例如：\n1 docker exec -it upf bash 不过最好是利用pid方法进入网络空间进行ifconfig或者ping操作\n1 2 3 ps aux | grep upf #获取进程（可以得到各种进程id） pgrep -f upf #获取pid： sudo nsenter -t \u0026lt;pid\u0026gt; -n #进入网络空间 其余指令还有kill之类的可以终止进程。\n除此之外有的时候ping网站可能会遇到name resolution的报错，可以换成ip地址，指令如下，以百度为例：\n1 nslookup baidu.com 不过ping命令有的时候会被网页阻拦，用curl命令比较合适，例如：\n1 curl www.baidu.com 3.启动环境部分 启动核心网和ueransim环境分以下三步，根据实际情况可以更改代码：\n启动核心网环境\n1 2 cd ~/free5gc-compose sudo docker-compose up -d 启动UERANSIM的gnb\n1 2 cd ~/UERANSIM/build ./nr-gnb -c ../config/free5gc-gnb.yaml 启动ue\n1 2 cd ~/UERANSIM/build sudo ./nr-ue -c ../config/free5gc-ue.yaml 虚拟网卡测试方法\n1 2 ping www.baidu.com -I uesimtun0 # 或者 curl www.baidu.com -I uesimtun0 二、虚拟机Linux设置vpn方法 途径1.主机共享vpn 参考：VMware Ubuntu虚拟机 使用主机VPN 配置（简单、可行）-CSDN博客\n（图片资源没保存，所以只有文字了）\n一定要记得开篇说的资源备份啊呜呜呜 打开虚拟网络编辑器，可以看到虚拟机开启的NAT模式是VMnet8。\n主机windows+R输入cmd打开命令行输入ipconfig ，得到VMnet8的ip：192.168.154.1。之后查询vpn端口，以clash为例，右上角记下vpn的端口，之后允许局域网记得打开。\n在虚拟机的设置中打开proxy代理，选择manual，\n虚拟机网络地址与VPN Port需要根据本机确定，左边四个填VMnet4的ip，右边四个填vpn的端口即可。\n问题1：如果我的vpn没有用clash，不知道vpn端口怎么办？ 参考：在windows中如何查看代理的地址和端口_怎么查看自己电脑的代理地址-CSDN博客\nWindows+R输入control打开主机的控制面板，点击「网络和Internet」，\n在「internet选项」中点击「连接」的「局域网设置」\n启用代理服务器，不用打勾，保持默认就行，右下角端口即为vpn端口。\n问题2：为什么我的vpn它通不了外网？ 一般而言，如果浏览器可以打开谷歌就证明梯子没问题。那么问题就出在——==实际命令行终端走代理需要进一步配置端口==\n已知代理端口（例如7890），之后就set一下http、https两个协议走这个端口，类似于\n1 set http_proxy=http://127.0.0.1:7890 \u0026amp; set https_proxy=http://127.0.0.1:7890 但是具体还是得看具体的设备，这种事情可以问一下ai。\n途径2.linux里下载Clash csdn里有相关内容，请自行搜索，配置起来较麻烦，\nLinux下Clash翻墙完整使用指南 | Clash中文教程网。\n这个教程写的不是很清楚，可以拓展一下。\n三、主机与虚拟机共享剪贴板 参考：主机和VMware虚拟机间共享剪贴板方法_vmware workstation 中启用了剪贴板共享功能-CSDN博客\n为啥主机复制过去虚拟机粘贴不了？有的时候可以复制粘贴有的时候不能？一般来说，先设置虚拟机，需要保证客户机隔离里面是启用复制粘贴的（默认启用）\n如果这个时候还不行，可以需要安装虚拟机增强工具包open-vm-tools和open-vm-tools-desktop，安装命令：\n1 2 sudo apt-get install open-vm-tools sudo apt-get install open-vm-tools-desktop 然后重启系统：\n1 sudo reboot 四、虚拟机关机与挂起 虚拟机关机就是不再占用资源，但是再次开启需要重启；挂起就是虚拟机保存挂起的状态，打开不需要重启。\n==最重要的事情是记得自己虚拟机的路径==\n问题1：关机后找不到虚拟机咋办 点击扫描虚拟机，找到.vmx文件打开就行。\n五、虚拟机分盘扩容操作 有的时候给虚拟机分盘内存太小，当盘快满的时候会弹出警告，一定要提前采取措施来分盘，否则会启动不了虚拟机。\n1 lsblk #检查磁盘情况 1 df -h\t#检查磁盘占用情况 可以看到我主要的盘sda3占用了53%。\n分盘主要是两个操作\n划出内存\n编辑虚拟机设置-硬盘-拓展，然后选择扩展后的硬盘空间\n分配空间\n考虑两种方法可以，有一个是类似于windows的图形化分盘，下载并启动gparted，这个方法在VMware虚拟机扩容磁盘，有很详细图文_虚拟机硬盘空间-CSDN博客有提及。\n1 2 3 sudo apt-get update sudo apt install gparted sudo gparted 在图形界面中可以选择 /dev/sda3 分区，然后调整它的大小。\n或者利用fdisk（推荐），输入命令：\n1 sudo fdisk /dev/sda 再输入p得到分区列表预览：\nfdisk 中执行命令汇总如下\n输入 p 显示当前的分区列表，记下 /dev/sda3 的起始位置（例如 1054720）。\n输入 d 删除 /dev/sda3，并确保输入分区号（3）。注意，这不会删除数据，分区号只是从分区表中移除。\n输入 n 创建新分区，选择 3 为分区号，使用 1054720为起始扇区（与之前一致），并设置结束扇区为新的磁盘容量（可以选择最大可用空间）。\n输入 w 保存更改并退出 fdisk。\n可能遇见这种情况，但是如果默认系统是linux一般用不上：输入 t 设置分区类型，选择 83（Linux 文件系统）。\n==问题1：虚拟机退出后再启动会卡在初始页面== 类似于这样，进不去虚拟机，一直卡在这个地方：\n因为没注意虚拟机盘满了，卡在初始界面进不去，所以要在盘快满的时候提前分盘。\n==VMware卡在命令行/dev/sda3 clean\u0026hellip; 界面不动的解决办法：==\n参考https://blog.csdn.net/SunshineLiy/article/details/134372529\n显示分区已满，需要找到这个分区一些没用的文件删掉，先进去虚拟机能分盘再说。\n进入 grub 模式，重启虚拟机，在显示到这个界面的时候\n快速按下 Shift 不要松，直到出现grub界面（这一步需要反应快一些，多试几遍就可以，如果操作正确的话，grub界面很快就会出来，如果按Shift三秒没有出现，大概率是操作错误了。此方法如果进不去，也可以参考网上也有其他进入grub的方法）\n进入ubuntu(高级模式)，选择第一个advanced\n之后选择第二个\n选择root\n选择root后会弹出两行提示，直接回车就可以\n输入以下指令看到磁盘使用情况\n1 df -h sda3确实100%满了，所以我们需要在命令行来清理一些文件。\n查看根目录下所有文件和目录的磁盘使用情况\n1 du -sh /* 找到自己占用空间较多的文件目录\n1 rm -f /文件名/ 删除那些暂时没有用的大文件，reboot 重启。然后赶紧增加空间！！！\n六、Ubuntu桌面相关问题 1.桌面字标大小 调整分辨率和缩放就行。缩放到200%左右比较合适，在setting里面设置。有的时候会有桌面越来越小的bug，在设置里面改就可以。\n2.桌面卡死 输入以下命令重启桌面等一会就行：\n1 sudo restart lightdm 七、虚拟机没网设置网络图标消失 如果只是网络连接处显示问号，可以在终端输入：\n1 sudo vim /var/lib/NetworkManager/NetworkManager.state 保证这里是true。重启虚拟机，检查情况。如果还没有反应可以重启主机，再排查\n参考彻底解决VM ubuntu在虚拟机找不到网卡无法上网的问题 - 知乎\n还是不行在setting里面找network关了重开，而如果第一行开启按钮没有显示的话可能需要用以下方式：\n1 2 3 sudo service NetworkManager stop sudo rm /var/lib/NetworkManager/NetworkManager.state sudo service NetworkManager start 最后的办法是还原默认设置后再看看有没有，没有的话再进行上一步输入命令。\nFree5gc部署、UERANSIM安装 主要参考：Free5gc+UERANSIM模拟5G网络环境搭建及基本使用 - FreeBuf网络安全行业门户\n此处采用docker容器化部署，其他独立化部署可以看教程，根据实际情况同时参考教程和本文档。\n==考虑实际情况，建议这里采用镜像源代理的方式，暂且不用vpn==\n一、Free5gc部署 准备工作 使用命令：\n1 uname -a 此命令用于确认安装的虚拟机内核版本，要求的内核版本为5.0.0-23-generic或5.4.0及之后的版本,\n若当前虚拟机内核版本不符合要求，则需要更换内核，使用以下命令安装5.0.0-23-generic的内核，注意用sudo是管理员权限的操作，需要输入密码，为了安全，密码一般是不显示的但是可以输入，并不是bug，输入后按回车。\n1 2 sudo apt install \u0026#39;linux-image-5.0.0-23-generic\u0026#39; sudo apt install \u0026#39;linux-headers-5.0.0-23-generic 安装完成后，需要重启虚拟机，并在启动时连按shift键，进入grub引导页，更换启动的Linux内核。\n之后安装基本组件：\n1 2 3 4 5 6 7 8 9 10 sudo apt install git-all sudo apt-get install curl sudo apt install make sudo apt -y install gcc sudo apt -y install g++ sudo apt -y install autoconf sudo apt -y install libtool sudo apt -y install pkg-config sudo apt -y install libmnl-dev sudo apt -y install libyaml-dev 如果人为设置了vpn就不用按照教程里替换源了。之后安装go语言环境，注意安装go语言环境时必须为普通用户安装，否则会导致后续安装出现问题。输入命令：\n1 go 以确认是否存在其他版本的go，若存在，则通过以下命令删除\n1 sudo rm -rf /usr/local/go 之后安装最新版本的go：\n1 2 3 cd ~ wget https://dl.google.com/go/go1.20.4.linux-amd64.tar.gz sudo tar -C /usr/local -zxvf go1.20.4.linux-amd64.tar.gz 安装完成后，需要通过以下命令配置环境变量（此过程按回车不会有输出）\n1 2 3 4 5 mkdir -p ~/go/{bin,pkg,src} echo \u0026#39;export GOPATH=$HOME/go\u0026#39; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#39;export GOROOT=/usr/local/go\u0026#39; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#39;export PATH=$PATH:$GOPATH/bin:$GOROOT/bin\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc 之后输入命令：\n1 go #有版本号等输出就行。安装成功，再补充安装以下模块，该模块为free5gc独立部署的日志模块，容器化部署也可以安装：\n1 #go get -u github.com/sirupsen/logrus 通过官方安装脚本安装docker，\n1 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 安装完成后，运行命令docker \u0026ndash;version验证。之后需要安装docker-compose，通过以下命令完成：\n1 sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.28.5/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose 重启docker服务即可完成docker的部署：\n1 systemctl restart docker 完成后，需要将当前普通用户加入docker用户组，docker用户组在上述安装时自动创建，无需手动创建：\n1 2 sudo gpasswd -a $USER docker #将当前普通用户加入docker用户组 newgrp docker #更新docker用户组 此步目的在于防止后续free5gc容器化部署时，到make base步骤，出现permission denied。\n更换镜像源 这是很重要的一步，原理是部分镜像源起到类似代理的作用。在网上搜索最新docker镜像源，参考\n国内能用的Docker镜像源【2025最新持续更新】_docker 镜像-CSDN博客\n国内仍然可用docker镜像源汇总，长期维护，定期更新（2025年3月21日）_docker 国内镜像源-CSDN博客\nDocker换源加速(更换镜像源)详细教程（2025.3最新可用镜像，全网最详细） - 知乎\n然后输入类似于\n1 sudo nano /etc/docker/daemon.json 来创造或修改配置文件，在里面写入代理网站，但是下面这个是一开始的，现在被ban掉了好多，不推荐，\n1 2 3 4 5 6 7 8 { \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://hub-mirror.c.163.com\u0026#34;, \u0026#34;https://mirror.baidubce.com\u0026#34;, \u0026#34;https://docker.mirrors.ustc.edu.cn\u0026#34;, \u0026#34;https://mirror.ccs.tencentyun.com\u0026#34; ] } 推荐这些，或者去我给的参考链接找最新存活的：\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://docker-0.unsee.tech\u0026#34;, \u0026#34;https://docker-cf.registry.cyou\u0026#34;, \u0026#34;https://docker.1panel.live\u0026#34;, \u0026#34;https://docker.xuanyuan.me\u0026#34;, \u0026#34;https://1ms.run\u0026#34;, \u0026#34;https://hub.fast360.xyz\u0026#34;, \u0026#34;https://hub.littlediary.cn\u0026#34; ] } 然后保存离开，输入以下命令清除缓存、重启docker\n1 2 sudo systemctl daemon-reload sudo systemctl restart docker 然后可以查看docker源是否更改：\n1 docker info | grep -A 1 \u0026#34;Registry Mirrors\u0026#34; ==最后可以尝试验证：==\n1 docker pull hello-world 拉取成功即可以。\n继续安装其他组件 安装cmake：\n1 sudo snap install cmake –classic 安装mongodb\n1 2 3 sudo apt -y update sudo apt -y install mongodb wget git sudo systemctl start mongodb 此时可能会报错Package 'mongodb' has no installation candidate，有可能因为ubuntu没更新找不到安装包，可以试试导入mongodb的公钥，运行以下命令：\n1 wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-archive-keyring.gpg 并添加其到apt，\n1 echo \u0026#34;deb [signed-by=/usr/share/keyrings/mongodb-archive-keyring.gpg] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse\u0026#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list 更新包列表：\n1 sudo apt-get update 安装mongodb：\n1 sudo apt-get install mongodb-org 之后可以选择性安装yarn**（独立化部署的话则是必须）**\n1 2 3 curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \u0026#34;deb https://dl.yarnpkg.com/debian/ stable main\u0026#34; | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt update \u0026amp;\u0026amp; sudo apt install yarn 构建GTP5G模块 注意构建GTP5G模块时，需要用普通用户构建，否则后续使用时会出错\n1 2 3 cd~ git clone https://github.com/free5gc/gtp5g.git cd gtp5g 编译\n1 2 make sudo make install 此时可能会遇到报错，如果是类似于warning: the compiler differs from the one used to build the kernel等，原因是找不到那几个编译器。\n需要安装：\n1 2 sudo apt update sudo apt install gcc-12 然后重新编译：\n1 2 3 make clean make sudo make install 容器化部署free5gc模拟核心网 首先，通过git clone下载项目代码（注意这里和教程文章的不太一样，教程里面那个链接好像用不了）：\n1 2 3 cd ~ git clone https://github.com/free5gc/free5gc-compose.git cd free5gc-compose 如果有vpn就不用按照文章里说的改代理\n编译代码：\n1 2 3 cd ~/free5gc-compose make base docker-compose build 其中docker-compose build一步可能报版本错误，原因在于上面安装docker、docker-compose时可能安装了较低版本的docker、docker-compose，此时可以选择重装docker、docker-compose或者修改docker-compose.yaml文件中第一行版本号3.8为当前版本，建议优先选择重装docker、docker-compose，以回避未知错误，可以通过命令docker \u0026ndash;version命令查询当前版本。（不过如果是按教程里的话一般没问题）\n交叉编译 交叉编译指利用不同的平台进行处理，并把安装或编译好的东西转移到所需平台。这种思想不仅仅用于以下案例，可以用到很多地方。\n如果不按照刚才说法设置镜像代理的话，编译过程中也有可能遇到golang bullseye报错，\n=\u0026gt; ERROR [internal] load metadata for docker.io/library/golang: 21.5s ------ \u0026gt; [internal] load metadata for docker.io/library/golang:1.21.8-bullseye\n如果实在不打算使用镜像源，可以利用==交叉编译==在主机windows挂梯子下载docker desktop软件，下载好后在上面搜索golang，选1.24.0-bullseye（我用的1.23.6-bullseye，这俩都行），点击pull，即可把包下载到电脑里。\n然后在主机打开命令行，输入\n1 docker images ，可以看到包已经下载到了主机里，然后输入命令：\n1 docker save -o E:\\go\\golang_1.24.0-bullseye.tar golang:1.24.0-bullseye 可以把包保存到电脑路径里\n从主机把压缩包拷贝到虚拟机：\n在虚拟机输入\n1 2 cd ~/free5gc-compose/base vim Dockerfile 进入配置文件，\n输入I，进入修改，把版本号改成所用版本(1.24.0之类的)，然后Esc，输入命令:wq（带冒号）即可保存退出。\n然后虚拟机终端输入：\n1 sudo docker load \u0026lt; /home/golang_1.24.0-bullseye 之后重复原本步骤编译就可以。\n==至此，free5gc容器化部署完成==\n安装UERANSIM 1 2 cd ~ git clone https://github.com/aligungr/UERANSIM 然后：\n1 2 3 4 5 6 7 sudo apt update sudo apt upgrade sudo apt install make sudo apt install g++ sudo apt install libsctp-dev sudo apt install lksctp-tools sudo apt install iproute2 编译代码：\n1 2 cd ~/UERANSIM make 编译完成就安装成功了。\n二、启动free5gc和ueransim环境 ==Free5gc，启动！==\n1 2 cd ~/free5gc-compose docker-compose up -d 之后\n1 ifconfig 这是查看网卡地址，启动free5gc后，会在本地虚拟化出一系列的网卡，这一步需要关注的是原先虚拟机自带的网卡，通常这类网卡的ip地址均处于192.168.*.*网段，网卡名类似ens33，eth0之类，可以以此特征区分出来\n接下来需要查看并记录amf网元的ip地址：\n1 docker inspect amf 找到上面记录有\u0026quot;IPAddress\u0026quot;: 的一行，后面记录的即是amf的ip地址\n记录下这两个ip地址后，就可以完成UERANSIM中gnb的配置了，通过修改free5gc-gnb.yaml配置文件完成这一步操作：\n1 2 cd ~/UERANSIM/config/ vim free5gc-gnb.yaml 输入I进行修改模式，需要修改其中的ngapIp、gtpIp为本机ip\n修改其中的amfconfig一项下的address为amf的ip，然后Esc，再输入 :wq\n表示保存并退出，类似还有 :q :qa :exit :^X之类的。\n每次重启机器后，amf地址可能改变，注意更改。\n==至此，UERANSIM的基站配置完成==，接下来需要在free5gc中注册UERANSIM的UE部分：\n访问地址 http://localhost:5000/可进入到free5gc的webui处，登录：\n用户名：admin 密码：free5gc\n之后通过free5gc的webui新增一个ue的注册信息（否则会报错说无法注册），此处配置的UE信息原则上需要和~/UERANSIM/config/free5gc-ue.yaml中的信息一致，但由于此处UERANSIM的代码作者已经设置好，所以实际上无需做任何更改，直接拉到最下面点create就ok\n之后启动UERANSIM模拟设备\n1 2 cd ~/UERANSIM/build#启动一个shell，执行启动gnb的流程 ./nr-gnb -c ../config/free5gc-gnb.yaml#通过nr-gnb程序，指定使用的gnb配置文件，启动模拟基站 另起一个shell，执行启动UE的流程\n1 2 cd ~/UERANSIM/build #通过nr-ue程序，指定使用的ue配置文件，启动模拟用户设备 sudo ./nr-ue -c ../config/free5gc-ue.yaml #此处因为需要虚拟出一张ue的网卡，所以需要root权限执行 启动的两个shell不可关闭，可以后台执行，但建议前台执行方便实时查看状态信息。启动完成后，执行ifconfig可以看到多了一张名为uesimtun0的网卡；另外，在free5gc的webui处，查看REALTIME STATUS可以看到有一个UE处于连接状态，此时即证明UERANSIM的环境启动成功：\n之后测试一下\n1 ping www.baidu.com -I uesimtun0 能通就ok，在free5gc官网也可以看到connect信息。\n三、以基站配置测试ueransim软件层 修改PLMN值，IP不变，进行测试、注册\n先改文件里PLMN的mcc、mnc分别为001、01，按照自己的目录（我的涉及/home/wxy/free5gc-compose/config/amfcfg.yaml、gnbcfg.yaml、smfcfg.yaml、uecfg.yaml，/home/wxy/UERANSIM/config/free5gc-gnb.yaml、free5gc-ue.yaml，包括修改ue里supi的前五位为00101：\n还有nrfcfg文件的mcc、mnc\n改完save，然后关闭docker\n1 docker-compose down 再重新跑核心网流程==wireshark抓包查看闪退原因==\n启动核心网环境\n1 2 cd ~/free5gc-compose sudo docker-compose up -d 启动UERANSIM的gnb\n1 2 cd ~/UERANSIM/build ./nr-gnb -c ../config/free5gc-gnb.yaml 启动ue\n1 2 cd ~/UERANSIM/build sudo ./nr-ue -c ../config/free5gc-ue.yaml 并重新create，修改mcc、mnc、id后注册\n然后根据一般ueransim测试流程启动，查询有无报错，并用uesimtun0来ping一下百度。\n虚拟网卡测试\n1 ping www.baidu.com -I uesimtun0 之后需要修改ip： 分别在docker-compose文件里面添加upf的ip、设置amf的ip，还有network的范围\n地址范围subnet要可以覆盖，改为192.168.0.0/16\n由于n3iwue、free5gc-n3iwf两部分此时用不到，可以把这两段代码分别注释掉。我们要修改amf为192.168.2.198，smf内的upf与N3口192.168.8.198。\n在amfcfg将ngapip改为基站的192.168.2.198\nsmfcfg的upf ip改为基站upf 192.168.8.198\n以及upfcfg的N3 ip为192.168.8.198\n改完保存，把docker给down掉关闭，然后重复一般测试流程，成功标志为\n1 ping baidu.com -I uesimtun0 可以收到包。\n问题1：遇到ue、gnb成功连接且核心网成功配置但是不通网 这个问题比较随机，因为每个人虚拟机、或者linux子系统的默认配置不同。诊断方法可以考虑进入upf的网络空间进行调整；或者docker logs amf那几个看一下日志；或根据路由、配合抓包进行诊断。具体命令在本文档第二部分。\n查询UERANSIM内的UE和GNB有没有建立PDU连接：\n如图可见二者连接正常，说明ue与gnb连接正常。之后可以分别查看一下amf、upf有没有正常启动、报错，用以下命令检查日志：\n1 docker logs amf 1 docker logs upf 如果没有报错，排查gnb通过N3口连接upf：\n1 ping 192.168.8.198 -I uesimtun0 还是通的话，可以进入upf的网络空间，看upf联网如何，\n利用pid方法进入网络空间进行ifconfig或者ping操作\n1 pgrep -f upf #获取pid： 1 sudo nsenter -t \u0026lt;pid\u0026gt; -n #进入网络空间 之后，在里面输入：\n1 ifconfig 查找网络工具，若有upfgtp或者eth0就可以，之后输入ping命令\n1 ping 8.8.8.8 如果有包收发，那就证明upf可以上网，所以整个网络连接没有问题。\n问题出在哪里？==IP 转发 和 NAT 配置==\n我们需要启用 IPv4 数据包转发功能（将接收到的 IP 数据包从一个网络接口转发到另一个网络接口），以及开启NAT模式（数据包离开当前网络时进行源地址转换），并允许转发的数据包通过防火墙。==ICMP==\n把docker-compose文件的upf部分的command修改添加以下代码\n1 2 3 4 5 6 7 8 command: - /bin/bash - -c - | sysctl -w net.ipv4.ip_forward=1 iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE iptables -I FORWARD 1 -j ACCEPT ./upf -c /free5gc/config/upfcfg.yaml 修改后save，然后把ueransim关掉，docker给down掉，重新跑一遍启动流程，之后测试\n1 ping www.baidu.com -I uesimtun0 跑通成功。\n四、连接实体基站进行测试 用SSH来连接基站，需要下载ssh工具\n1 2 sudo apt update sudo apt install openssh-client 启动基站流程：\n分别打开三个终端shell\n在第一个shell输入\n1 ssh root@192.168.2.246 输入密码，然后输入\n1 cd /root/yzmm/rel/GNB/phy/bin ./run.sh 挂在后台，别关闭。\n在第二个shell输入\n1 ssh root@192.168.2.246 输入密码，然后输入\n1 cd /root/yzmm/rel/GNB/cu/cu/nr_hl_cu/build ./run.sh 在第三个shell输入\n1 ssh root@192.168.2.246 再\n1 cd /root/yzmm/rel/GNB/du/ran/DU/build/intel/du_bin/bin ./run.sh 需要关掉ueransim，防止ip干扰冲突。\n然后添加端口映射38412，此处对amf修改无严格要求。\n添加upf网口2152:2152 /udp，经测试ue无法注册信号，产生mac相关报错，原因可能是free5gc默认和ueransim的对齐导致一些文件配置有问题。于是采用修改的核心网，工程文件来源于师兄distributed-core-network-control-plane。\n写在结尾 ==特别鸣谢：两位师兄和两位老师==\n后期工作：\n梳理流程思路，抓包分析\n深入理解代码、规范、抓包工具；实体基站和软件ueransim的不同\n步进调试环境搭建、分布式核心网改进\n本文只涉及基础的Free5GC内容，由于传统核心网的集中性、易受攻击的问题，可以采取分布式架构进行优化，下篇文章阐述何为分布式核心网、市场空间、技术路线等。\n","date":"2025-05-23T12:45:04+08:00","image":"https://mosfish.github.io/wxyblog/p/5g%E6%A0%B8%E5%BF%83%E7%BD%91%E9%83%A8%E7%BD%B2%E5%8F%8A%E6%B5%8B%E8%AF%95%E6%89%8B%E5%86%8C/11111_hu_c0b57e309dff8638.png","permalink":"https://mosfish.github.io/wxyblog/p/5g%E6%A0%B8%E5%BF%83%E7%BD%91%E9%83%A8%E7%BD%B2%E5%8F%8A%E6%B5%8B%E8%AF%95%E6%89%8B%E5%86%8C/","title":"5G核心网部署及测试手册"},{"content":"BNNs学习入门 贝叶斯神经网络(Bayesian Neural Networks)，相较于CNN之类的神经网络，输入单点数据、输出单点数据，贝叶斯神经网络可以输入一段概率分布，经过训练后可以生成一个输出的概率分布。所以采用贝叶斯的方式，模型训练后就可以变成——输入一个东西，而输出一个概率分布。在综述Bayesian Neural Networks: An Introduction and Survey中提到，概率方法(BNN)提供的输出分布有助于开发可信模型，因其能识别预测中的不确定性，这当然也有一个范围哈。本学习笔记考虑了几个Literature Survey和技术博客进行总结，非常感谢作者们的分享~\n原文：Bayesian methods for performing regression with that of a simple neural network, and illustrates the importance of measuring uncertainty. While both methods perform well within the bounds of the training data, where extrapolation is required, the probabilistic method provides a full distribution of the function output as opposed to the point estimates provided by the NN. The distribution over outputs provided by probabilistic methods allows for the development of trustworthy models, in that they can identify uncertainty in a prediction. Given that NNs are the most promising model for generating AI systems, it is important that we can similarly trust their predictions.\nNeural Networks(NNs) 基础架构 在讨论BNNs前还是先了解一下NN的结构。神经网络的基础架构——Multi-Layer Perceptron (MLP) network，现代网络结构（如卷积网络）都具有等效的多层感知表示形式。简单的MLP搭建如下，输入$\\phi$和输出$f$分别如下： $$ \\phi_j = \\sum_{i=1}^{N_1}a(x_iw_{ij}^1) \\tag{1}\\\\ f_k = \\sum_{j=1}^{N_2}g(\\phi_jw_{jk}^2) $$ 示意图如下，中间为隐藏层，每个节点代表一个神经元或执行输入状态求和与激活的状态，箭头表示神经元间连接强度的参数（权重）：\n用于二元分类或一维回归的具有单个隐藏层的神经网络架构示例 其中Activation function（激活函数），类似于第一个公式，仿射变换+非线性变换$\\phi(.)$，曾经是由$sign(.)$函数来表示，后来逐渐被Sigmoid, Hyperbolic Tangent (TanH), Rectified Linear Unit (ReLU) 和 Leaky-ReLU这几个函数取代。激活函数是很重要的一个概念，其图示如下，蓝色表示函数，红色表示函数的数值导数，\n激活函数，(a) Sigmoid; (b) TanH; (c)ReLU; (d) Leaky-ReLU 响应(Responding derivatives) 使用Sigmoid函数时，原表达式等价于逻辑回归，那么网络的输出成为多个逻辑回归模型的总和。\u2029对于回归模型函数$g(.)$将是恒等函数；二元分类则采用Sigmoid函数。其实公式(1)用矩阵表达更简便，前向传播过程(Forward propagation)可以表示为 $$ \\mathbf{\\Phi} = a(\\mathbf{X^T W^1}) \\tag{2}\\\\ \\mathbf{F} = g(\\mathbf{\\Phi W^2}) $$权重(Weight) 以反向传播实现成本函数最小化：基于当前参数设置计算模型输出值，再求得各参数对应的偏导数，随后利用这些导数对每个参数进行迭代更新，其中$\\alpha$表示学习率，迭代过程可以描述为： $$ w_{t+i} = w_t - \\alpha\\frac{ \\partial J(x,y) }{ \\partial w_t }. \\tag{3} $$Bayesian Neural Networks 后验分布 Posterior distribution 贝叶斯统计学派正是采用这种视角——将未知（或潜在）参数作为随机变量处理，并致力于通过训练数据中可观测的信息，学习这些参数的条件概率分布。\n这句翻译其实就是BNN的核心思想，考虑到BNN的学习过程中要通过已知数据来推测未知权重，这属于逆概率问题，所以可以用贝叶斯定理解决，观测概率来表示这些权重 $\\mathbf{\\omega}$ 的分布，最终得到基于**观测数据 ** $D$ 的条件参数分布 $p(\\omega | D)$ ，称之为后验分布(Posterior distribution)。\n在训练之前，需要观测$\\omega$和$D$的联合分布 $p(\\omega, D)$, 似然函数为$p(D|\\omega)$，与选定的network architecture、loss function有关， $$ p(\\omega, D) = p(\\omega)p(D|\\omega) \\tag{4} $$ 先验分布$p(\\omega)$和似然函数确定后，基于贝叶斯定理，可得到模型权重的后验分布。 $$ \\pi(\\omega |D) = \\frac{p(\\omega)p(D|\\omega)}{\\int p(\\omega)p(D|\\omega)d\\omega} = \\frac{p(\\omega)p(D|\\omega)}{p(D)} \\tag{5} $$ 后验分布中的分母被称为marginal likelihood，或evidence，相对于未知模型权重而言是个常数，其作用是对后验分布进行归一化处理，确保其构成有效的分布。在后验分布中可以对变量、预测量进行预测，预测结果以期望形式呈现，唯一区别在于$f(\\omega)$不同： $$ E_{\\pi}[f] = \\int f(\\omega)\\pi (\\omega |D)d\\omega \\tag{6} $$ 因此，贝叶斯推理过程核心在于把未知的模型权重边缘化（积分）处理。\n大部分情况后验分布计算还是比较费劲——主要因为边缘似然的问题。在非共轭模型或潜在变量呈非线性关系（如神经网络）的情况下，该量值可能无法通过解析方法求得；对于高维模型而言，该积分的数值近似计算量大。所以要对后验分布进行近似处理。\n","date":"2025-05-16T19:21:25+08:00","image":"https://mosfish.github.io/wxyblog/p/bnns%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/11111_hu_b2962112989767b8.png","permalink":"https://mosfish.github.io/wxyblog/p/bnns%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/","title":"BNNs入门学习"},{"content":"水木清华的深冬与初春 喜欢摄影，随快门声记录下那些难忘的时刻，一点一点凑成碎片，从流年中捞起那不变的永恒。\n记得刚到这里的时候，也才将将春节之后。京城的街道充满了三种氛围：节日的热闹，假期的冷清，外来旅客潮的繁忙——巧了，我也是这众多旅人中的一员，听着火车站大哥亲切的京腔，似乎很久都没回家了，今年有幸在华北（家的地方），感受到了发自内心的愉悦与放松。\n喜欢家里的饺子，喜欢家里的炒饭炒面，喜欢门外吆喝的小商小贩，喜欢小区门口的庆丰包子铺，喜欢地铁口的煎饼果子、加俩蛋。\n人间烟火气，最抚凡人心\n或者说，最抚凡人心的，是熟悉的、家乡的烟火气。五道口这里，是恩师的母校，也是故友求学的地方，虽时运不济恰恰错峰难以见一面故友，不过我相信，来日方长，未来我应该还会来五道口访问交流，希望到那时我们都摆脱了升学的压力，在饺子铺一叙过往吧。\n热情好客的寒潮与零下十度 回想起来，倒是第一次因为学业而来到京城，不想麻烦亲朋好友，便匆匆租了个房了事。好巧不巧，海淀的初春也遭遇了难得一遇的大寒潮，尽管我裹得严严实实（但是面部、双耳没裹上），也是被冻得丢了半条命，肚子痛得打滚，在租住的小房子里，听着耳旁嗤嗤的窗户声，点了一份疙瘩汤当晚饭（还有美团送药），草草了事。\n进京第一餐，一碗粉花了两碗的钱，亏麻了 呆了一个月的小房子，还不小心把浴室的花洒摔坏了（没拿住） 想不到第一次在北京过元宵节是这样的方式，人挤人。\n北京的正月十五 在清华忙忙忙的日子 相较于康乐园，似乎清华园也差不多大，当然如果康乐园的家属区感觉占比大一点。冬日（或者初春）的清华简直就一人民公园，一眼看上去和我家门口的公园感觉差不多，寥寥几个学生、打卡的游客，以及我这种无业游民哈哈（旅客？学生？应该算visiting student吧）。在这里的时候，每天上午9点多来，忙到晚上9点多10点回去，我摸鱼的时候学了Latex、Markdown，真的挺有意思；除此之外其实主线任务是学习Linux开发、Arm开发、free5GC核心网架构，其实第一次开会我真的啥也没听懂，倒是快走人的时候才知道——哦，原来我是这么干的啊！\n走入FIT楼，其实挺热的 一些五道口的生活碎片 在FIT的无线中心，还挺热，在平常应该穿毛衣的情况下，我在里面基本都是短袖，以至于每次楼下取外卖的时候，门口大爷会一脸错愕的盯着我：“小伙子，火力是旺！”此外，我在知乎还看到了一个问题：《为什么FIT楼这么热》，倒是个性化推送了。\n学校大，食堂离我在的FIT楼远，因此我吃了20多天外卖（海淀的饭真的有点贵的\u0026hellip;）。其实有的生活过的挺苦逼的，比如：\nCase1 早上没有报备入校咋办？ 很正常，系统甚至有延迟，五道口旁边有一个咖啡店，也有喜茶、霸王茶姬，“欢迎来chang”是我这段时间听到最多的话，因为好喝、便宜、人少、离学校和车站近，所以奶茶店学习挺常见的哈\u0026hellip;\n奶茶办公让我想起了“学术酒吧” 甚至打包到实验室喝哈 或者出去摸鱼，因为电脑电源只能撑几个小时哈，真不是我不想干活（doge\n扫街，爽 Case2 苦逼生活？咋个苦法？ 其实只是相对的苦不是绝对的苦，只是不如中大的生活罢了。压力大，任务繁重，好几次连外卖都没顾得上吃，楼道里自动售货机的面包、泡面凑合凑合\u0026hellip;\u0026hellip;\nFIT楼道里还有这种小会议桌，给它个机会成为额滴餐桌 我的工位 但是好景不长，之后就被发配到基站的屋子里，和一堆服务器大铁疙瘩待一块去了，一看就是我们臭理工男的工作室，鉴于FIT楼建成已久，所以基建也没那么新，谁说的清华的厕所超级豪华的给我站出来！😭\n草，被发配楼上了 Case3 被鸟屎砸咋办 巧了我有发言权😅\n根据辅修课程刚学的外部环境分析~我分析分析哈：\n宏观环境：冬天清华乌鸦巨多，加上假期人员少，因此时令性聚集 行业环境：FIT楼和东南门常年乌鸦聚集 竞争环境：乌鸦是保护动物，海淀奈何不了 市场分析：周围洗衣店疯狂点赞 不扯了，几张图，可视化一下：\n乌鸦的战绩 猜猜这是什么？\nFIT楼对面那个楼顶和树全是 嘿嘿，是乌鸦！！！全是乌鸦，闹麻了\u0026hellip;\u0026hellip;😅然后就，我一周被连续砸中了三次（第二次是溅到的，没拍上）：\n知道为啥文创店卖雨伞了吧😆 吃啥 探店+食堂，食堂怒坑师兄50大洋嘿嘿，发两张没掏钱蹭饭的图片：\n清华饭还可以，就是澜园有点贵，毕竟是教职工食堂 还去了方砖厂炸酱面，免费续面条真不错，就是面一般般，可能网红属性就这样：\n还是面条好吃，已经算平价面条了 结束与告别 用UERANSIM和free5GC、分布式核心网搭建了通信系统，学到了很多，写了个文档，我想想，等之后有时间我写给文档（脱敏版）上传github，就叫《全网最详细版free5gc和ueransim核心网通信链路部署搭建手册》啦！（如果我不懒没有鸽的话）\n汇报 清华的老师：恭喜你完成了一个有意义的short stay，希望你学到了东西！\n时间过得好快，中午被实验室的师兄们拉去清华的某个餐厅点菜聚餐（倒是挺贵，不过师兄们未来应该不会差钱的），当天晚上最后和师兄在金谷园吃了顿饺子，\nps：诶我天，饺子馆的酱油鸡真好吃！！！\n好像是葱油鸡？忘了，反正有鸡和油俩字 告别 收拾东西，感慨诸多，感谢这一段经历，感谢老师、师兄的帮助。其实很多时候人都会被他人灌输的“高价值”事物洗脑，以为某些东西看上去“高级”或者“先进”，实际上祛魅的最好方式是真正去体验一下，去感受一下，才能知道是否和他人描述的相符，这也有点像小马过河吧。\n没有调查就没有发言权。\n这次实地的“考察”让我感觉到，清华，我国工科教育当之无愧的殿堂，事实上里面的学生和大家也没什么不同，只是一批更聚焦、更能坚守的同龄人，在深耕的领域有自己的taste，在朋辈身旁有更大的peer pressure（这可能有优有劣）；清华的设施也没想象中那么新规或者那么老旧，一切都是刚刚好，甚至和中大都很像。\n每一次来到这里，都能唤起许多美好的回忆，又能够发现许多新鲜的东西，心情不同，时间不同，景色也不同。\n说了这么多，权当老夫痴言乱语罢了。好了，已经迫不及待想回广州吃肠粉了，拜了个拜！\n有些不舍吧 ","date":"2025-03-12T18:51:10+08:00","image":"https://mosfish.github.io/wxyblog/p/%E9%82%A3%E6%AE%B5%E5%9C%A8%E6%B8%85%E5%8D%8E%E7%9A%84%E6%97%A5%E5%AD%90/10_hu_e823027e922704f0.jpg","permalink":"https://mosfish.github.io/wxyblog/p/%E9%82%A3%E6%AE%B5%E5%9C%A8%E6%B8%85%E5%8D%8E%E7%9A%84%E6%97%A5%E5%AD%90/","title":"那段在清华的日子"},{"content":"偶然的相遇 曾经走过的路，于独处中回望，隔着一程山水，仍是是生命中抹不掉的风景，就如那场没有约定的遇见.\n初遇：BMI课程 记得一开始认识这门课程，是被舍友撺掇，“诶蚊香，你看到教务系统的那个国际化选修课通知了吗？我选了个Cambridge搞数字IC的老师，感觉还挺有意思。”\nemm，我记得当时的吐槽是，“中大啥时候这么low了跑去找中介了？”不过看在选课免费，我就报了个试试水，当时在纠结UCLA做无人机通信算法的（现在才知道这个方向好出活），以及这个帝国理工学院做BMI（脑机接口）的Neal老师——这让我想起来，好像初高中的时候我一直想学医学（或生物）以及天文、考古，从小就很喜欢这些奇妙的、神秘而有现实意义的事物，于是我选了后者。\n昨天和本科导师聊天也提到了这个事情 事实上，Neal老师好像是加州人，然后去伦敦发展的老师，除了人很Nice以外，英语口音也很好（这就不得不提我那个选剑桥的数字ic的哥们，他老师是印度人，咖喱口音根本听不懂哈哈），10月份开始上课，课程难度类似于导论，课程人也不多，十来个人。我打听好像后续有遴选环节？不确定，但也在好好听课：\n记录第一次上课 之后果然有遴选，好在兄弟我有一个一般般的雅思、几个省级小奖、以及我能忽悠，因此我居然入围了？？？甚至$1500奖学金(差不多免费了)，泪目，中大你居然，我哭死，砍掉CMU联培这是终于想通了？\n我测，第一次见到除了offer以外还给丢过来一个录取package 在South Kensington 其实前期还是上课、开会，然后干活。奶奶的，光机票5000块钱，林林总总也有个快2w，谁tm说项目免费的？？？食宿还好，交通费不报销，还好待的不久，伦敦生活成本真高啊，英国百姓也不容易。具体的我不写了，没呆个几天，贵死个人。\n其实我一开始以为，Imperial College是下面这样的：\n原本认为的校徽 实际上，好像20年之后就换了校徽，23年还没事但是今年已经改了\n改校徽了，怎么说呢我尊重每个人的审美但是我欣赏不来... campus还挺好看的，有的地方也还没换新校徽。晴天少，刚好到雨季，偶然出来太阳也挺开心的。\n（冬？春？）反正天气奇怪的campus 其实我挺喜欢老校徽的，跑文创店一看，嘿！丑不拉几的校徽印上去，就卖300块钱，坑谁呢？？？\n文创周边店是不是用来坑外人的？ 以及网图经常出现的、实地打卡标志性建筑，而且IC他居然还有老建筑群，倒是不错。校徽改了的IC有一种独特的\u0026hellip;丑。\n冬日的帝国理工 以及寻常景色，你不说我还真以为是在我国，我觉得广州就挺像。\n静谧而忙碌的伦敦 Brain Machine Interface 事实上开会又开会的过程中，我和电通院一老哥一拍脑门，“咱们这个项目老师做啥？” “脑机接口。“ ”哦”\n因此我们想了想，刚好前段时间看文献发现把CNNs加个双向循环再加个注意力机制变成的CNN-BiGRU-AT模型在把肌电图（and脑电图）的信号与情感分类关联起来的过程中发挥了超出意料的功能。因此，我们把这个拿来降噪。嗯。尽管没啥板卡条件，但是在AutoDL租了个，最终也是水了个共一的会议出来。\n感慨 伦敦佬上个学真费劲，真贵；还有，英国佬的口语以我的水平真容易成哑巴，算了不说也罢。\n这个项目其实觉得有点水，但也还好，可以作为一个跳板去摸摸不水的那些。\n","date":"2025-02-16T21:55:21+08:00","image":"https://mosfish.github.io/wxyblog/p/imperial-college%E4%B8%8E%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/inic_hu_cb4aa2d789cf0d10.png","permalink":"https://mosfish.github.io/wxyblog/p/imperial-college%E4%B8%8E%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/","title":"Imperial College与脑机接口"},{"content":"突然告知要代表学院出差 事情是这样的，突然接到通知让我和其他几位（我是某校级科创协会会长，其他一块的有类似学生会主席、研会主席、团副这种）去西安交流，于是我请了假、上了车，去了机场。刚好DSP这次点名了，我给李教授说请假了，结果教授说：\n不相信，总有人假冒假条，一点到名就说请假。\n不过这次确实是真的，因为我都上飞机了。于是，迎着落日余晖和熟悉的干燥的冷气，我到了西安，感受到熟悉却又陌生的气息。\n且向长安那畔行 西安的东西和我家很像，街角的包子铺、肉夹馍，面条饺子之类的，却都是我喜欢吃的东西。酒店有健身房，倒是不错。\n落地，休整，健身，蹭饭 西电交流——代表、上桌！ 首日，由于我们是第一批，天大寒、砚冰坚，雨夹雪实在有些冷人了。起初进不去，找了迪卡侬取取暖。首日去了西电的研究生校区进行交流，后来发现我们的交流具有现实意义——学硕、专硕与工程博士的区分设立。\n也是有资格上桌交流了 西交交流——创新港，偷摸鱼 好吧这次就没资格上桌了，于是校园走走，嗯，还挺好的其实。\n西交电院内部，很冷 疑似主楼 瞎逛 其实这个地方来了很多次，所以也不知道逛啥，会了会老友（我们仨），然后和大部队一块去了趟省博物馆、大唐不夜城啥的，买了一堆纪念币，除此之外就\u0026hellip;就只是吃吃吃了。\n一些碎片 结语 好吃，太冷，太干，下次不来了。\n当初若选大学的时候来了西交，那可能会有些不一样；不过我不后悔来中大，西交压力太大了。\n","date":"2024-12-17T18:29:48+08:00","image":"https://mosfish.github.io/wxyblog/p/%E8%A5%BF%E5%AE%89%E4%B8%A4%E4%B8%89%E4%BA%8B/1_hu_1608042fdcdb7301.jpg","permalink":"https://mosfish.github.io/wxyblog/p/%E8%A5%BF%E5%AE%89%E4%B8%A4%E4%B8%89%E4%BA%8B/","title":"西安两三事"},{"content":"独向新疆的旅者 旅途的开始 其实很早就有类似的计划，恰巧需要到阿克苏办一些事情\n","date":"2024-09-14T00:20:48+08:00","image":"https://mosfish.github.io/wxyblog/p/%E7%BB%BF%E7%9A%AE%E7%81%AB%E8%BD%A6%E4%B8%8A%E7%9A%84%E6%96%B0%E7%96%86%E4%B9%8B%E6%97%85/11_hu_1fb45366f7d7e496.jpg","permalink":"https://mosfish.github.io/wxyblog/p/%E7%BB%BF%E7%9A%AE%E7%81%AB%E8%BD%A6%E4%B8%8A%E7%9A%84%E6%96%B0%E7%96%86%E4%B9%8B%E6%97%85/","title":"绿皮火车上的新疆之旅"}]